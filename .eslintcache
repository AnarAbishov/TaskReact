[{"C:\\Users\\user\\Desktop\\taskreact\\src\\index.js":"1","C:\\Users\\user\\Desktop\\taskreact\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\App\\App.js":"3","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\index.js":"4","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\NotFound\\NotFound.js":"5","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\OrderHistory\\OrderHistory.js":"6","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\All_products\\index.js":"7","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Basket\\Basket.js":"8","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Order\\Order.js":"9","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Layout\\Header\\Header.js":"10","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\cartSumReducer.js":"11","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\cartReducer.js":"12","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\orderReducer.js":"13","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\cartActions.js":"14","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\orderActions .js":"15","C:\\Users\\user\\Desktop\\taskreact\\src\\API\\getAllProducts.js":"16","C:\\Users\\user\\Desktop\\taskreact\\src\\API\\getCategories.js":"17","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\initialState.js":"18","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\actionTypes.js":"19","C:\\Users\\user\\Desktop\\taskreact\\src\\API\\baseURL.js":"20"},{"size":794,"mtime":1612056000316,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1612056000316,"results":"23","hashOfConfig":"22"},{"size":1606,"mtime":1612057639502,"results":"24","hashOfConfig":"22"},{"size":309,"mtime":1612056000324,"results":"25","hashOfConfig":"22"},{"size":315,"mtime":1612056000244,"results":"26","hashOfConfig":"22"},{"size":2035,"mtime":1612057716417,"results":"27","hashOfConfig":"22"},{"size":6306,"mtime":1612056000236,"results":"28","hashOfConfig":"22"},{"size":5861,"mtime":1612057990479,"results":"29","hashOfConfig":"22"},{"size":3657,"mtime":1612058174346,"results":"30","hashOfConfig":"22"},{"size":3946,"mtime":1612057681072,"results":"31","hashOfConfig":"22"},{"size":397,"mtime":1612056000324,"results":"32","hashOfConfig":"22"},{"size":1890,"mtime":1612056000324,"results":"33","hashOfConfig":"22"},{"size":373,"mtime":1612056000324,"results":"34","hashOfConfig":"22"},{"size":627,"mtime":1612056000324,"results":"35","hashOfConfig":"22"},{"size":148,"mtime":1612056000324,"results":"36","hashOfConfig":"22"},{"size":1287,"mtime":1612056000236,"results":"37","hashOfConfig":"22"},{"size":368,"mtime":1612056000236,"results":"38","hashOfConfig":"22"},{"size":83,"mtime":1612056000324,"results":"39","hashOfConfig":"22"},{"size":322,"mtime":1612056000324,"results":"40","hashOfConfig":"22"},{"size":141,"mtime":1612056000236,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ro38v6",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"C:\\Users\\user\\Desktop\\taskreact\\src\\index.js",[],["92","93"],"C:\\Users\\user\\Desktop\\taskreact\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\components\\App\\App.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\index.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\components\\NotFound\\NotFound.js",["94"],"import React, { Component } from \"react\";\r\nimport notFound404 from \"../../img/NotFound/notFound.jpg\";\r\nimport \"./index.scss\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <>\r\n      <div className=\"notFound404\">\r\n        <img src={notFound404} alt=\"\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\OrderHistory\\OrderHistory.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\components\\All_products\\index.js",["95","96","97","98","99","100","101","102","103"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport getAllProducts from \"../../API/getAllProducts\";\r\nimport qs from \"query-string\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport imageTask from \"../../img/all_products/imagetask.png\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartActions from \"../../store/actions/cartActions\";\r\nimport alertify from 'alertifyjs'\r\n\r\nlet pageProduct = 1;\r\nconst All_products = (props) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [productImages, setProductImages] = useState([]);\r\n  const [countProduct, setCountProduct] = useState(8);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoadingMini, setIsLoadingMini] = useState(true);\r\n  const [cart, setcart] = useState([]);\r\n\r\n  const history = useHistory();\r\n\r\n  const queryParam = qs.parse(props.location.search);\r\n  const query = new URLSearchParams(props.location.search);\r\n  const category = query.get(\"category\");\r\n  const sort = query.get(\"sort\");\r\n\r\n  useEffect(() => {\r\n    pageProduct = 1;\r\n    setIsLoadingMini(true);\r\n    getAllProducts(category, countProduct, pageProduct, sort)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          if (response.data.length < 8) {\r\n            setIsLoadingMini(false);\r\n            pageProduct = 1;\r\n          }\r\n          setProducts(response.data);\r\n        }\r\n      })\r\n      .finally((response) => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [category, sort]);\r\n\r\n\r\n\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const fetchMoreData = () => {\r\n    if (products.length >= 500) {\r\n      setHasMore(false);\r\n      return;\r\n    }\r\n    \r\n    pageProduct++;\r\n\r\n    getAllProducts(category, countProduct, pageProduct, sort)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          if (response.data.length < 8) {\r\n            setIsLoadingMini(false);\r\n          }\r\n          response.data.map((item) =>\r\n            setProducts((oldProducts) => [...oldProducts, item])\r\n          );\r\n        }\r\n      })\r\n      .finally((response) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n\r\n  const addToCart = (product) => {\r\n    props.actions.addToCart({quantity: 1,product});\r\n    alertify.success(product.name + \" add to basket\")\r\n  };\r\n \r\n  return (\r\n    <>\r\n      <section id=\"all_products\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {isLoading === true ? (\r\n              <div\r\n                className=\"col-md-12 d-flex justify-content-center align-items-center\"\r\n                style={{ height: \"55vh\" }}\r\n              >\r\n                <div\r\n                  className=\"spinner-border\"\r\n                  style={{ color: \"#ff9466\" }}\r\n                  role=\"status\"\r\n                >\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n              </div>\r\n            ) : products.length == 0 ? (\r\n              <div className=\"col-md-12 d-flex justify-content-center align-items-center\">\r\n                <div className=\"notProduct\">\r\n                  <h2>0 elan tapıldı</h2>\r\n                  <p>Sizin sorğunuza uyğun heçnə tapılmadı</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <InfiniteScroll\r\n                dataLength={products.length}\r\n                next={fetchMoreData}\r\n                hasMore={hasMore}\r\n                loader={\r\n                  isLoadingMini && (\r\n                    <div\r\n                      className=\"col-md-12 d-flex justify-content-center align-items-center\"\r\n                      style={{ height: \"100px\" }}\r\n                      id=\"loaderId\"\r\n                    >\r\n                      <div\r\n                        className=\"spinner-border\"\r\n                        style={{ color: \"#ff9466\" }}\r\n                        role=\"status\"\r\n                      >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                }\r\n              >\r\n                <div className=\"container\">\r\n                  <div className=\"row\">\r\n                    {products.map((product, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\"col-lg-3 col-md-4 col-sm-4  col-6\"\r\n                      >\r\n                        <div className=\"product\">\r\n                          <Link to={`/product_details/${product.id}`}>\r\n                            <div className=\"products_item\">\r\n                              <div className=\"item\">\r\n                                <div className=\"products_item_top\">\r\n                                  <img src={imageTask} alt=\"\" />\r\n                                </div>\r\n                                <div className=\"products_item_name\">\r\n                                  <p>{product.name}</p>\r\n                                </div>\r\n                                <div className=\"products_item_bottom\">\r\n                                  <p>{product.price}</p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </Link>\r\n                          <div className=\"product_item_button\">\r\n                            <button\r\n                              onClick={() => addToCart(product)}\r\n                            >\r\n                              Добавить в корзину\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </InfiniteScroll>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    basket: state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    actions: {\r\n      addToCart: bindActionCreators(cartActions.addToCart, dispatch),\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(All_products);\r\n","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Basket\\Basket.js",["104"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as cartActions from \"../../store/actions/cartActions\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Link } from \"react-router-dom\";\r\nimport deleteIcon from \"../../img/basket/delete.svg\";\r\n\r\nconst Basket = (props) => {\r\n  const [priceAllBasketProducts, setpriceAllBasketProducts] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    props.cart.map((item) =>\r\n      setpriceAllBasketProducts((prevState) => {\r\n        let sum =\r\n          Number(prevState) +\r\n          Number(item.product.price) * Number(item.quantity);\r\n        return sum;\r\n      })\r\n    );\r\n  }, []);\r\n  const clearLocalStorage = () => {\r\n    props.actions.removeAllFromCart();\r\n    setpriceAllBasketProducts(\"\");\r\n  };\r\n\r\n  const basketItemCountDown = (product) => {\r\n    props.actions.countCart({ product, type: \"down\" });\r\n    setpriceAllBasketProducts((prevState) => {\r\n      let sum = prevState - Number(product.product.price);\r\n      return sum;\r\n    });\r\n  };\r\n\r\n  const basketItemCountUp = (product) => {\r\n    props.actions.countCart({ product, type: \"up\" });\r\n    setpriceAllBasketProducts((prevState) => {\r\n      let sum = prevState + Number(product.product.price);\r\n      return sum;\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (product) => {\r\n    props.actions.removeFromCart(product.product);\r\n    setpriceAllBasketProducts((prevState) => {\r\n      let sum =\r\n        Number(prevState) -\r\n        Number(product.product.price) * Number(product.quantity);\r\n      return sum;\r\n    });\r\n    alertify.error(product.product.name + \" delete from cart\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"basket_content\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <div className=\"basket_header\">\r\n                <h1>Корзина</h1>\r\n                <h4 onClick={() => clearLocalStorage()}>Очистить корзину</h4>\r\n              </div>\r\n              <div className=\"basket\">\r\n                <div className=\"basket_top\">\r\n                  <div className=\"basket_top_left\">\r\n                    <h5>Стоимость корзины:</h5>\r\n                    <p>{priceAllBasketProducts}</p>\r\n                  </div>\r\n                  <div className=\"basket_top_right\">\r\n                    <Link\r\n                      to=\"/order\"\r\n                      onClick={() => {\r\n                        props.actions.addPriceAllBasketProducts(\r\n                          priceAllBasketProducts\r\n                        );\r\n                      }}\r\n                    >\r\n                      <button>Оформить</button>\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n                <div className=\"basket_bottom\">\r\n                  {props.cart.length === 0 ? (\r\n                    <div className=\"basket_empty\">\r\n                      <span>Пустая корзина</span>\r\n                    </div>\r\n                  ) : (\r\n                    props.cart.map((cartItem, index) => (\r\n                      <div key={index} className=\"basket_item\">\r\n                        <div className=\"col-md-6\">\r\n                          <div className=\"basket_bottom_left\">\r\n                            <p>{cartItem.product.name}</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                          <div className=\"basket_bottom_center\">\r\n                            <div className=\"basket_item_count\">\r\n                              <span\r\n                                onClick={() =>\r\n                                  cartItem.quantity > 1 &&\r\n                                  basketItemCountDown(cartItem)\r\n                                }\r\n                              >\r\n                                -\r\n                              </span>\r\n                              <span>{cartItem.quantity}</span>\r\n                              <span onClick={() => basketItemCountUp(cartItem)}>\r\n                                +\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"basket_item_price\">\r\n                              <span>\r\n                                {cartItem.product.price * cartItem.quantity}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                          <div className=\"basket_bottom_right\">\r\n                            <button onClick={() => removeFromCart(cartItem)}>\r\n                              <img src={deleteIcon} alt=\"\" />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cart: state.cartReducer,\r\n    priceAllBasketProducts: state.cartSumReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    actions: {\r\n      removeFromCart: bindActionCreators(cartActions.removeFromCart, dispatch),\r\n      removeAllFromCart: bindActionCreators(\r\n        cartActions.removeAllFromCart,\r\n        dispatch\r\n      ),\r\n      countCart: bindActionCreators(cartActions.countCart, dispatch),\r\n      addPriceAllBasketProducts: bindActionCreators(\r\n        cartActions.addPriceAllBasketProducts,\r\n        dispatch\r\n      ),\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Basket);\r\n","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Order\\Order.js",["105","106","107"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./index.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as orderActions from \"../../store/actions/orderActions \";\r\nimport alertify from \"alertifyjs\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Order = (props) => {\r\n  const { register, handleSubmit, watch, errors } = useForm();\r\n  let history = useHistory();\r\n\r\n  const onSubmit = (data) => {\r\n    props.actions.addOrder({...data,date: new Date()});\r\n    alertify.success(\"Оплата выполнена\");\r\n    history.push(\"/orderhistory\");\r\n  };\r\n\r\n  const delivery = 200;\r\n  return (\r\n    <>\r\n      <div className=\"order_content\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-8\">\r\n              <div className=\"order_header\">\r\n                <h1>Доставка</h1>\r\n              </div>\r\n              <div className=\"order\">\r\n                <div className=\"order_left\">\r\n                  <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <h3>Когда доставить?</h3>\r\n                    <input\r\n                      type=\"text\"\r\n                      ref={register({ required: true })}\r\n                      name=\"time\"\r\n                      placeholder=\"Выберите время\"\r\n                    />\r\n                    {errors.time && <span>This field is required</span>}\r\n                    <h3>Куда доставить?</h3>\r\n                    <input\r\n                      type=\"text\"\r\n                      ref={register({ required: true })}\r\n                      name=\"address\"\r\n                      placeholder=\"Выберите адрес доставки\"\r\n                    />\r\n                    {errors.address && <span>This field is required</span>}\r\n                    <h3>Имя</h3>\r\n                    <input\r\n                      type=\"text\"\r\n                      ref={register({ required: true })}\r\n                      name=\"name\"\r\n                    />\r\n                    {errors.name && <span>This field is required</span>}\r\n                    <h3>Телефон</h3>\r\n                    <input\r\n                      type=\"text\"\r\n                      ref={register({ required: true })}\r\n                      name=\"phone\"\r\n                    />\r\n                    {errors.phone && <span>This field is required</span>}\r\n                      <button type=\"submit\">Сделать заказ</button>\r\n                  </form>\r\n                </div>\r\n                <div className=\"order_right\">\r\n                  <p>\r\n                    Стоимость товаров:{\" \"}\r\n                    <span>{props.priceAllBasketProducts}₽</span>\r\n                  </p>\r\n                  <p>\r\n                    Стоимость доставки: <span>{delivery}₽</span>\r\n                  </p>\r\n                  <p>\r\n                    Итого:{\" \"}\r\n                    <span>{props.priceAllBasketProducts + delivery}₽</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    order: state.orderReducer,\r\n    priceAllBasketProducts: state.cartSumReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    actions: {\r\n      addOrder: bindActionCreators(orderActions.addOrder, dispatch),\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Order);\r\n","C:\\Users\\user\\Desktop\\taskreact\\src\\components\\Layout\\Header\\Header.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\cartSumReducer.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\cartReducer.js",["108","109","110"],"import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nconst cartReducer = (state = initialState.cart, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TO_CART:\r\n      var addedItem = state.find(\r\n        (c) => c.product.id === action.payload.product.id\r\n      );\r\n      if (addedItem) {\r\n        var newState = state.map((cartItem) => {\r\n          if (cartItem.product.id === action.payload.product.id) {\r\n            return Object.assign({}, addedItem, {\r\n              quantity: addedItem.quantity + 1,\r\n            });\r\n          }\r\n          return cartItem;\r\n        });\r\n        return newState;\r\n      } else {\r\n        localStorage.setItem(\"cart\",JSON.stringify([...state,{ ...action.payload }]))\r\n        return [...state, { ...action.payload }];\r\n      }\r\n    case actionTypes.COUNT_CART:\r\n      var addedItem = state.find(\r\n        (c) => c.product.id === action.payload.product.product.id\r\n      );\r\n      var newState = state.map((cartItem) => {\r\n        if (cartItem.product.id === action.payload.product.product.id) {\r\n\r\n          if (action.payload.type == \"up\") {\r\n            return Object.assign({}, addedItem, {\r\n              quantity: addedItem.quantity + 1,\r\n            });\r\n          } else {\r\n            if (addedItem.quantity > 1) {\r\n              return Object.assign({}, addedItem, {\r\n                quantity: addedItem.quantity - 1,\r\n              });\r\n            }\r\n          }\r\n        }\r\n        return cartItem;\r\n      });\r\n      return newState;\r\n\r\n    case actionTypes.REMOVE_FROM_CART:\r\n      const newState2 = state.filter(\r\n        (cartItem) => cartItem.product.id !== action.payload.id\r\n      );\r\n      return newState2;\r\n    case actionTypes.REMOVE_ALL_FROM_CART:\r\n      state = [];\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cartReducer;\r\n","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\orderReducer.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\cartActions.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\orderActions .js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\API\\getAllProducts.js",["111","112"],"import React from 'react';\r\nimport axios from 'axios'\r\nimport {baseURL} from './baseURL'\r\nimport isEmpty from \"lodash/isEmpty\"\r\n\r\nfunction getAllProducts(category,count,page,sort,gender) {\r\n\r\n    let endCount = count*(page);\r\n    let startCount = count*(page-1);\r\n    let range = [startCount,endCount]\r\n    let categoryArr = [category]\r\n    // const response =  axios({\r\n    //     method: 'get',\r\n    //     url: `${baseURL}/api/Products?range=[${startCount},${endCount}]&filter={\"category_id\":${category}}`,\r\n    //     headers: {\r\n    //         'Content-Type': 'application/json',\r\n    //     },\r\n    //     params: {\r\n    //         CategoryId: category,\r\n    //         // Page: page,\r\n    //         // SortedType: sort,\r\n    //         // Gender: gender\r\n    //     },\r\n    // });\r\n\r\n    const response =  axios({\r\n        method: 'get',\r\n        url: `${baseURL}/api/Products`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        params: {\r\n            filter: !isEmpty(category) && `{\"category_id\":${category}}`,\r\n            range: range.reduce((f, s) => `[${f},${s}]`),\r\n            // Page: page,\r\n            sort: sort,\r\n            // Gender: gender\r\n        },\r\n    });\r\n\r\n    return (response);\r\n}\r\n\r\nexport default getAllProducts;","C:\\Users\\user\\Desktop\\taskreact\\src\\API\\getCategories.js",["113"],"import React from 'react';\r\nimport axios from 'axios'\r\nimport {baseURL} from './baseURL'\r\n\r\nfunction getCategories() {\r\n\r\n    const response =  axios({\r\n        method: 'get',\r\n        url: `${baseURL}/api/Categories`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });\r\n\r\n    return (response);\r\n}\r\n\r\nexport default getCategories;","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\reducers\\initialState.js",["114"],"export default {\r\n    cart: [],\r\n    priceAllBasketProducts: \"\",\r\n    order: {},\r\n}","C:\\Users\\user\\Desktop\\taskreact\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\user\\Desktop\\taskreact\\src\\API\\baseURL.js",[],["115","116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"125","line":16,"column":10,"nodeType":"123","messageId":"124","endLine":16,"endColumn":23},{"ruleId":"121","severity":1,"message":"126","line":16,"column":25,"nodeType":"123","messageId":"124","endLine":16,"endColumn":41},{"ruleId":"121","severity":1,"message":"127","line":17,"column":24,"nodeType":"123","messageId":"124","endLine":17,"endColumn":39},{"ruleId":"121","severity":1,"message":"128","line":20,"column":10,"nodeType":"123","messageId":"124","endLine":20,"endColumn":14},{"ruleId":"121","severity":1,"message":"129","line":20,"column":16,"nodeType":"123","messageId":"124","endLine":20,"endColumn":23},{"ruleId":"121","severity":1,"message":"130","line":22,"column":9,"nodeType":"123","messageId":"124","endLine":22,"endColumn":16},{"ruleId":"121","severity":1,"message":"131","line":24,"column":9,"nodeType":"123","messageId":"124","endLine":24,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":45,"column":6,"nodeType":"134","endLine":45,"endColumn":22,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":99,"column":33,"nodeType":"138","messageId":"139","endLine":99,"endColumn":35},{"ruleId":"132","severity":1,"message":"140","line":22,"column":6,"nodeType":"134","endLine":22,"endColumn":8,"suggestions":"141"},{"ruleId":"121","severity":1,"message":"142","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"143","line":1,"column":28,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"144","line":11,"column":35,"nodeType":"123","messageId":"124","endLine":11,"endColumn":40},{"ruleId":"145","severity":1,"message":"146","line":25,"column":11,"nodeType":"123","messageId":"147","endLine":25,"endColumn":20},{"ruleId":"145","severity":1,"message":"148","line":28,"column":11,"nodeType":"123","messageId":"147","endLine":28,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":31,"column":35,"nodeType":"138","messageId":"139","endLine":31,"endColumn":37},{"ruleId":"121","severity":1,"message":"149","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"121","severity":1,"message":"150","line":11,"column":9,"nodeType":"123","messageId":"124","endLine":11,"endColumn":20},{"ruleId":"121","severity":1,"message":"149","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":1,"column":1,"nodeType":"153","endLine":5,"endColumn":2},{"ruleId":"117","replacedBy":"154"},{"ruleId":"119","replacedBy":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'productImages' is assigned a value but never used.","'setProductImages' is assigned a value but never used.","'setCountProduct' is assigned a value but never used.","'cart' is assigned a value but never used.","'setcart' is assigned a value but never used.","'history' is assigned a value but never used.","'queryParam' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countProduct'. Either include it or remove the dependency array.","ArrayExpression",["158"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.cart'. Either include it or remove the dependency array.",["159"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'watch' is assigned a value but never used.","no-redeclare","'addedItem' is already defined.","redeclared","'newState' is already defined.","'React' is defined but never used.","'categoryArr' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["156"],["157"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [category, countProduct, sort]",{"range":"164","text":"165"},"Update the dependencies array to be: [props.cart]",{"range":"166","text":"167"},[1607,1623],"[category, countProduct, sort]",[728,730],"[props.cart]"]